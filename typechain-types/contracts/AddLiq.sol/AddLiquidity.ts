/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export interface AddLiquidityInterface extends utils.Interface {
  functions: {
    "addLiquidity(address,address,uint256,uint256)": FunctionFragment;
    "addLiquidityEth(address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "addLiquidity" | "addLiquidityEth"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addLiquidity",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquidityEth",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidityEth",
    data: BytesLike
  ): Result;

  events: {
    "LPTokenAddress(address)": EventFragment;
    "NewAmountA(uint256)": EventFragment;
    "NewAmountB(uint256)": EventFragment;
    "NewLiquidity(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LPTokenAddress"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewAmountA"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewAmountB"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewLiquidity"): EventFragment;
}

export interface LPTokenAddressEventObject {
  pair: string;
}
export type LPTokenAddressEvent = TypedEvent<
  [string],
  LPTokenAddressEventObject
>;

export type LPTokenAddressEventFilter = TypedEventFilter<LPTokenAddressEvent>;

export interface NewAmountAEventObject {
  amount: BigNumber;
}
export type NewAmountAEvent = TypedEvent<[BigNumber], NewAmountAEventObject>;

export type NewAmountAEventFilter = TypedEventFilter<NewAmountAEvent>;

export interface NewAmountBEventObject {
  amount: BigNumber;
}
export type NewAmountBEvent = TypedEvent<[BigNumber], NewAmountBEventObject>;

export type NewAmountBEventFilter = TypedEventFilter<NewAmountBEvent>;

export interface NewLiquidityEventObject {
  value: BigNumber;
}
export type NewLiquidityEvent = TypedEvent<
  [BigNumber],
  NewLiquidityEventObject
>;

export type NewLiquidityEventFilter = TypedEventFilter<NewLiquidityEvent>;

export interface AddLiquidity extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AddLiquidityInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addLiquidity(
      _tokenA: string,
      _tokenB: string,
      _amountA: BigNumberish,
      _amountB: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addLiquidityEth(
      _tokenA: string,
      _amountA: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addLiquidity(
    _tokenA: string,
    _tokenB: string,
    _amountA: BigNumberish,
    _amountB: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addLiquidityEth(
    _tokenA: string,
    _amountA: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addLiquidity(
      _tokenA: string,
      _tokenB: string,
      _amountA: BigNumberish,
      _amountB: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    addLiquidityEth(
      _tokenA: string,
      _amountA: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "LPTokenAddress(address)"(pair?: null): LPTokenAddressEventFilter;
    LPTokenAddress(pair?: null): LPTokenAddressEventFilter;

    "NewAmountA(uint256)"(amount?: null): NewAmountAEventFilter;
    NewAmountA(amount?: null): NewAmountAEventFilter;

    "NewAmountB(uint256)"(amount?: null): NewAmountBEventFilter;
    NewAmountB(amount?: null): NewAmountBEventFilter;

    "NewLiquidity(uint256)"(value?: null): NewLiquidityEventFilter;
    NewLiquidity(value?: null): NewLiquidityEventFilter;
  };

  estimateGas: {
    addLiquidity(
      _tokenA: string,
      _tokenB: string,
      _amountA: BigNumberish,
      _amountB: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addLiquidityEth(
      _tokenA: string,
      _amountA: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addLiquidity(
      _tokenA: string,
      _tokenB: string,
      _amountA: BigNumberish,
      _amountB: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addLiquidityEth(
      _tokenA: string,
      _amountA: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
